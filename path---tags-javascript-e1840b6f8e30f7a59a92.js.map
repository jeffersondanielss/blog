{"version":3,"sources":["webpack:///path---tags-javascript-e1840b6f8e30f7a59a92.js","webpack:///./.cache/json/tags-javascript.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/tags-javascript.json","module","exports","pathContext","posts","javascript","excerpt","html","id","timeToRead","frontmatter","date","path","tags","title","front-end","javascript funcional","SASS","CSS","post","tag"],"mappings":"AAAAA,cAAc,KAERC,yEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,aACAC,OACAC,aAEAC,QAAA,gQACAC,KAAA,okxBACAC,GAAA,gIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,sCACAC,MACA,aACA,YACA,wBAEAC,MAAA,mCAIAR,QAAA,4PACAC,KAAA;AACAC,GAAA,0IACAC,WAAA,EACAC,aACAC,KAAA,2BACAC,KAAA,gDACAC,MACA,aACA,aAEAC,MAAA,6CAIAC,cAEAT,QAAA,gQACAC,KAAA,okxBACAC,GAAA,gIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,sCACAC,MACA,aACA,YACA,wBAEAC,MAAA,mCAIAR,QAAA,8PACAC,KAAA;AACAC,GAAA,iIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,uCACAC,MACA,OACA,MACA,aAEAC,MAAA,oCAIAR,QAAA,4PACAC,KAAA,+4gBACAC,GAAA,0IACAC,WAAA,EACAC,aACAC,KAAA,2BACAC,KAAA,gDACAC,MACA,aACA,aAEAC,MAAA,6CAIAE,yBAEAV,QAAA,gQACAC,KAAA;AACAC,GAAA,gIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,sCACAC,MACA,aACA,YACA,wBAEAC,MAAA,mCAIAG,OAEAX,QAAA,8PACAC,KAAA,+/hBACAC,GAAA,iIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,uCACAC,MACA,OACA,MACA,aAEAC,MAAA,oCAIAI,MAEAZ,QAAA,8PACAC,KAAA;AACAC,GAAA,iIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,uCACAC,MACA,OACA,MACA,aAEAC,MAAA,qCAKAK,OAEAb,QAAA,gQACAC,KAAA,okxBACAC,GAAA,gIACAC,WAAA,EACAC,aACAC,KAAA,aACAC,KAAA,sCACAC,MACA,aACA,YACA,wBAEAC,MAAA,mCAIAR,QAAA,4PACAC,KAAA;AACAC,GAAA,0IACAC,WAAA,EACAC,aACAC,KAAA,2BACAC,KAAA,gDACAC,MACA,aACA,aAEAC,MAAA,6CAIAM,IAAA","file":"path---tags-javascript-e1840b6f8e30f7a59a92.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/tags-javascript.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"pathContext\": {\n\t\t\t\"posts\": {\n\t\t\t\t\"javascript\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"front-end\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"javascript funcional\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"SASS\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"CSS\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"post\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"tag\": \"javascript\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-javascript-e1840b6f8e30f7a59a92.js","module.exports = {\n\t\"pathContext\": {\n\t\t\"posts\": {\n\t\t\t\"javascript\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"front-end\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"javascript funcional\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"SASS\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"CSS\": [\n\t\t\t\t{\n\t\t\t\t\t\"excerpt\": \"Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais...\",\n\t\t\t\t\t\"html\": \"<p>Que os pré-processadores facilitam nossa vida na hora de criar as nossas interfaces já não é novidade, o uso deles já é bem comum mesmo em aplicações pequenas. Mas mesmo sabendo de suas amplas funcionalidades as vezes acabamos usando apenas as mais simples, aninhamento de seletores, <strong>$variáveis</strong>, <strong>@mixins</strong>, <strong>%placeholders</strong>.</p>\\n<p>Nesse posts vou abordar outras funcionalidades muito úteis que podemos tirar mais proveito quando utilizamos SASS, como <strong>@function</strong>, <strong>@each</strong>, <strong>@if</strong>, <strong>map</strong>, <strong>map-get</strong>, <strong>darken</strong>, <strong>lighten</strong>.</p>\\n<h2>Darken e Lighten</h2>\\n<p>Podemos começar com os mais simples, o darken e o lighten tem muito em comum, são funções que recebem dois parâmetros, o primeiro é uma cor, e o segundo um valor  que irá alterar essa cor do primeiro parâmetro.</p>\\n<p>A diferença é que o lighten irá deixar essa cor mais clara enquanto o darken mais escura.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.box </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Essas funções são muito úteis na hora de criar sombras, como no caso de criar botões:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$red</span></span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token selector\\\">.btn--red </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$red</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 1px 1px 1px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 40%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$red</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Map</h2>\\n<p>Antes de ir para o tópico <strong>@each</strong>, vamos a uma breve introdução aos mapas com SASS, eles são bons na criação de regras iniciais do projeto, como configurar cores, fontes e breakpoints, podemos pegar como exemplo a definição das cores do projeto.</p>\\n<p>Ao invés de criar uma variável para cada cor, podemos criar uma coleção se cores, um mapa com  chave e valor correspondente a cada cor que precise ser criada armazenado em uma variável.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Agora para buscar as cores basta usar a função nativa do SASS <strong>map-get()</strong> que recebe dois parâmetros, o primeiro é o mapa, que no caso é <strong>$color</strong> e o segundo parâmetro é a chave correspondente a cor que você deseja.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">map-get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$color</span>, red<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token selector\\\">.elemento </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Each</h2>\\n<p>O <strong>@each</strong> é excelente em economizar tempo automatizando tarefas repetidas, é muito útil para criar muitas classes com as mesmas propriedades mas com valores diferentes.</p>\\n<p>Na criação dos principais componentes da sua aplicação como os botões e suas variações é um ótimo caso para se usar um each, aqui também vemos um dos benefícios de usar os mapas, usando o mesmo mapa do exemplo anterior vamos a criação dessas variações de botões.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$btnType</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$btnType}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Para o uso de variáveis em seletores e propriedades é preciso fazer a interpolação das mesmas, para isso é usada a sintax <strong>#{$variavel}</strong> como se pode perceber na linha <strong>8</strong> do exemplo acima.</p>\\n<p>Esse <strong>@each</strong> vai percorrer o mapa <strong>$color</strong> resgatar chave e valor e criar um botão para cara item. Isso vai resultar em três classes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>If</h2>\\n<p>O <strong>@if</strong> é muito útil na hora de criar functions, eachs, e mixins que em alguns casos precisa demonstrar um comportamento diferente, ao invés que criar um outro mixin você pode apenas inserir uma condição dentro desse bloco para que esse comportamento seja adicionado ou não.</p>\\n<p>Usando o exemplo do <strong>@each</strong> acima, digamos que apenas um dos botões precise receber um comportamento diferente, ainda assim podemos seguir com o mesmo código, basta adicionar um <strong>@if</strong> para identificar esse botão.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token property\\\"><span class=\\\"token variable\\\">$color</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token property\\\">red</span><span class=\\\"token punctuation\\\">:</span> #FF0000,\\n  <span class=\\\"token property\\\">green</span><span class=\\\"token punctuation\\\">:</span> #00FF00,\\n  <span class=\\\"token property\\\">blue</span><span class=\\\"token punctuation\\\">:</span> #0000FF\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@each</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span>, <span class=\\\"token variable\\\">$btnColor</span> in <span class=\\\"token variable\\\">$color</span> </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token selector\\\">.btn--<span class=\\\"token variable\\\">#{$name}</span> </span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token variable\\\">$btnColor</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px <span class=\\\"token function\\\">lighten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 20%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n    <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid <span class=\\\"token function\\\">darken</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$btnColor</span>, 10%<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">@if</span> <span class=\\\"token selector\\\"><span class=\\\"token variable\\\">$name</span> == red </span><span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Na linha <strong>11</strong> é adicionado essa condição que compara a chave do mapa, se <strong>$name</strong> que são as chaves do mapa <strong>$color</strong> for igual a <strong>red</strong> então a linha <strong>14</strong> é adicionada. Resultado:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code><span class=\\\"token selector\\\">.btn--red</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #FF0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #ff6666<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #cc0000<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> #FFFFFF<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--green</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #00FF00<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #66ff66<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #00cc00<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn--blue</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">background-color</span><span class=\\\"token punctuation\\\">:</span> #0000FF<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">box-shadow</span><span class=\\\"token punctuation\\\">:</span> inset 0 -1px 1px 0px #6666ff<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token property\\\">border-bottom</span><span class=\\\"token punctuation\\\">:</span> 3px solid #0000cc<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>Function</h2>\\n<p>A diretiva <strong>@function</strong> no SASS é útil pra que cada vez menos a gente precisa repetir códigos, no CSS há muitas operações que precisamos que podem ser transformadas em funções, como transformar medidas de fontes fixas em relativas.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code><span class=\\\"token keyword\\\">@function</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">@return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$px</span>/16<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> rem<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token selector\\\">.btn </span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">font-size</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">rem</span><span class=\\\"token punctuation\\\">(</span>32<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Há muito para se aproveitar dessa e de muitas outras funções que o SASS tem, podemos usar essas funções em coisas extremamente simples mas que podem economizar muito tempo, e tempo é dinheiro não é verdade?!</p>\\n<p>Tudo depende de como e quando você vai usar cada feature que o SASS pode te oferecer, quando a expectativa do projeto é crescer constantemente é ótimo ter algo desse tipo, vai facilitar muito na hora de implementar mudanças ou novas variações nos componentes que já existem.</p>\\n<p>No site do SASS tem muitas outras coisas interessantes que valem a pena ser consideradas, caso tenha interesse você pode acessar o <a href=\\\"http://sass-lang.com/guide\\\">Guide</a> ou a <a href=\\\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\\\">Documentação</a>.</p>\",\n\t\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-08-2016-tirando-maior-proveito-do-sass/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\t\"timeToRead\": 4,\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"date\": \"2016-08-21\",\n\t\t\t\t\t\t\"path\": \"/tirando-maior-proveito-do-sass.html\",\n\t\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\t\"SASS\",\n\t\t\t\t\t\t\t\"CSS\",\n\t\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"title\": \"Tirando maior proveito do SASS\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"post\": [\n\t\t\t{\n\t\t\t\t\"excerpt\": \"Introdução Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não...\",\n\t\t\t\t\"html\": \"<h2>Introdução</h2>\\n<p>Esse post é um estudo sobre currying, e também sobre Partial Application que pra mim no começo dos estudos eram a mesma coisa, esse conceito é uma feature nativa de muitas linguagens de programação funcional que no javascript apesar de não ser fornecido de forma nativa é possível implementar e usar essa técnica de forma parecida.</p>\\n<h2>História</h2>\\n<p>A técnica currying leva esse nome devido ao matemático norte americano Haskell Curry, sim o mesmo homenageado pela linguagem de programação funcional <a href=\\\"https://www.haskell.org/\\\">Haskell</a>, Curry Haskell desenvolveu o conceito de currying da lógica combinatória, criada por Moses Schönfinkel. Currying por definição é:</p>\\n<blockquote>\\n<p>\\\"Uma técnica de transformação de uma função que recebe múltiplos parâmetros (mais especificamente, uma n-tupla como parâmetro) de forma que ela pode ser chamada como uma cadeia de funções que recebem somente um parâmetro cada\\\" - <a href=\\\"https://pt.wikipedia.org/wiki/Currying\\\">Wikipédia</a>.</p>\\n</blockquote>\\n<h2>Currying vs Partial Application</h2>\\n<p>O Currying é o processo de transformar uma função que leva vários argumentos para uma cadeia de funções, currying trabalha sempre com funções unárias, ou seja, cada uma das funções não leva mais de um argumento. Já o Partial Application é quando se tem funções com mais argumentos, e ao executa-lá ela vai retornar uma outra função com menos argumentos.</p>\\n<h2>Partial Application</h2>\\n<p>Podemos pegar como exemplo uma função de soma, que na sua definição recebe dois parâmetros, usando esse conceito essa função quando chamada pode receber: os dois parâmetros e tudo ocorrerá normalmente como de costume, ou ela pode receber apenas um dos parâmetros, nesse caso ela retornará outra função que vai receber o parâmetro que faltou, veja a implementação dessa função no exemplo abaixo:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Entendido o como essa técnica funciona podemos usar a não tão nova especificação do javascript ES6 e um if ternátio para tornar isso menos verboso. Podemos retornar a função soma para uma constante, usar arrow functions sem chaves já que elas vão sempre retornar algo, e usar um if ternário para verificar se o segundo parâmetro foi passado ou não.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> x<span class=\\\"token punctuation\\\">,</span> y <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token keyword\\\">typeof</span> y <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span>\\n    <span class=\\\"token operator\\\">?</span> y <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n    <span class=\\\"token punctuation\\\">:</span> x <span class=\\\"token operator\\\">+</span> y\\n</code></pre>\\n      </div>\\n<p>A partir disso você pode chamar essa função de soma com nais flexibilidade, passando os dois parâmetros de uma só vez ou aplicando ela parcialmente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n\\n<span class=\\\"token keyword\\\">var</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// y =>  x + y</span>\\n<span class=\\\"token function\\\">resultado</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<h2>Currying</h2>\\n<p>No exemplo abaixo temos a função de nome <strong>curry</strong>, ela recebe três parâmetros <strong>fn,x,y</strong>, no caso <strong>fn</strong> é uma função que recebe <strong>x,y</strong> como parâmetro, mas como de costume, <strong>fn</strong> não recebe todos os parâmetros de uma vez só, ele recebe um parametro executa e retorna uma nova função para receber o próximo parâmetro, e por fim é executada a função com tudo que ela precisa <strong>f(x, y)</strong>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\n</code></pre>\\n      </div>\\n<p>Da mesma forma que fizemos na Partial Application podemos escrever isso de forma menos verbosa.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<p>Nesse caso a função <strong>curry</strong> que foi criada pode ser reusada em outros casos da mesma forma que foi usada no exemplo da <strong>soma</strong>, dessa forma podemos passar nossos argumentos separadamente.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">curry</span> <span class=\\\"token operator\\\">=</span> f <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">=></span> y <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">f</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">+</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subtrai</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">-</span> y\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">multiplica</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span>y<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> y\\n\\n<span class=\\\"token keyword\\\">const</span> resultado1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n<span class=\\\"token keyword\\\">const</span> resultado2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>subtrai<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//0</span>\\n<span class=\\\"token keyword\\\">const</span> resultado3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>multiplica<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//25</span>\\n\\n<span class=\\\"token keyword\\\">const</span> curried <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">curry</span><span class=\\\"token punctuation\\\">(</span>soma<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">curried</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//10</span>\\n</code></pre>\\n      </div>\\n<h1>Quem usa?</h1>\\n<p>O <a href=\\\"http://ramdajs.com/docs/#curry\\\">rambda</a> por exemplo que é uma lib funcional para javascript, usa a Partial Apprication em muitas de suas funções, onde as funções esperam seus argumentos mas se você não passar todos os que são precisos, vai ser retornada uma nova função e tudo vai funcionar como deveria, veja alguns exemplos:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>R<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=>  5</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">replace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/foo/g</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo foo foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// => \\\"bar bar bar\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'bar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">//=> \\\"barfoo\\\"</span>\\n\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\nR<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"bar\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">//=> true</span>\\n</code></pre>\\n      </div>\\n<h2>Pra não dizer que eu não falei das flores</h2>\\n<p>Talvez apenas com os exemplos matemáticos que usei acima fique um pouco difícil de fazer um paralelo com o mundo real, e você esteja pensando: legal, cara. Mas será que vou usar isso realmente? talvez. Um contexto onde pode ser aplicado que é usado muito no dia a dia é uma requisição ajax, provavelmente você já viu um trecho de código parecido com esse algumas vezes:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">deletarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">buscarDados</span> <span class=\\\"token operator\\\">=</span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ...</span>\\n</code></pre>\\n      </div>\\n<p>Acima temos um trecho de um CRUD, duas requisições, um get e um delete de dados feitos em um API Rest, podemos receber como parametro além do <strong>id</strong> o método usado pelo axios, para que na primeira execução da função a gente possa guardar um tipo de requisição para usar posteriormente com id's diferentes.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">import</span> axios <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'axios'</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">API</span> <span class=\\\"token operator\\\">=</span> method <span class=\\\"token operator\\\">=></span> id <span class=\\\"token operator\\\">=></span>\\n  axios<span class=\\\"token punctuation\\\">[</span>method<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`https://api.exemplo.com.br/v1/users/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>id<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> response <span class=\\\"token operator\\\">=></span> response<span class=\\\"token punctuation\\\">.</span>data <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>error<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n\\n\\n<span class=\\\"token keyword\\\">const</span> buscarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'get'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> deletarDados <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">API</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'delete'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n\\n\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'954'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n<span class=\\\"token function\\\">buscarDados</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'684'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => {...data}</span>\\n</code></pre>\\n      </div>\\n<h2>Conclusão</h2>\\n<p>A vantagem que você pode tirar desses conceitos é o poder de escrever funções que esperam muitos argumentos, mas ter o controle para aplicar eles conforme a sua necessidade, ou conforme você vai recebendo eles, ou seja, você pode chamar suas funções mesmo se no momento ainda não tiver todos os parâmetros que são requeridos por ela. E é mais uma forma de escrever funções genéricas para serem reusadas em diferentes contextos.</p>\\n<h3>Ler mais</h3>\\n<ul>\\n<li><a href=\\\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8\\\">Curry or Partial Application?</a></li>\\n<li><a href=\\\"http://2ality.com/2011/09/currying-vs-part-eval.html\\\">Currying versus partial application</a></li>\\n<li><a href=\\\"https://www.safaribooksonline.com/library/view/programming-javascript-applications/9781491950289/ch02.html#partial-application\\\">Programming JavaScript Applications</a></li>\\n<li><a href=\\\"http://2ality.com/2017/11/currying-in-js.html\\\">Currying is not idiomatic in JavaScript</a></li>\\n</ul>\",\n\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/21-12-2017-usando-currying-no-javascript/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"timeToRead\": 5,\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"date\": \"2017-12-21\",\n\t\t\t\t\t\"path\": \"/usando-currying-no-javascript.html\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\"front-end\",\n\t\t\t\t\t\t\"javascript funcional\"\n\t\t\t\t\t],\n\t\t\t\t\t\"title\": \"Usando currying no javascript\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">fn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">soma</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">operacao</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t],\n\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"tag\": \"javascript\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-javascript.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/tags-javascript.json\n// module chunks = 10"],"sourceRoot":""}