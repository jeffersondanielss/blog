{"version":3,"sources":["webpack:///path---hello-world-html-c6d7e6c1ef3c9b624adb.js","webpack:///./.cache/json/hello-world-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/hello-world-html.json","module","exports","data","markdownRemark","html","frontmatter","date","path","tags","title","pathContext","prev","next","excerpt","id","timeToRead","url"],"mappings":"AAAAA,cAAc,KAERC,0EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,6rBACAC,aACAC,KAAA,aACAC,KAAA,oBACAC,KAAA,KACAC,MAAA,iBAIAC,aACAC,MAAA,EACAC,MACAC,QAAA,4PACAT,KAAA,6ghBACAU,GAAA,0IACAC,WAAA,EACAV,aACAC,KAAA,2BACAC,KAAA,gDACAC,MACA,aACA,aAEAC,MAAA,4CAGAO,IAAA","file":"path---hello-world-html-c6d7e6c1ef3c9b624adb.js","sourcesContent":["webpackJsonp([15],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/hello-world-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Oláá, aqui nasce o primeiro post :), Já vou começar com um cliche:</p>\\n<h4>\\\"É ensinado que se aprende.\\\"</h4>\\n<p>A algum tempo atraz começei a fazer o Be-mean, um curso sobre full-stack em javascript. E no meio do percurso tinha como tarefa fazer um artigo sobre variáveis, dai veio a vontade de escrever um pouco mais para compartilhar o que venho aprendendo ai nesses dois anos como desenvolvedor front-end, não é muito tempo mas já é um começo.</p>\\n<p>Pretendo postar aqui na maioria das vezes coisas sobre javascript que é o que mais venho estudando comprando livros e tal, mas provavelmente ira ter posts sobre outros assuntos.\\nSem mais delongas..</p>\\n<p><strong>Let's go!</strong></p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"date\": \"19/12/2015\",\n\t\t\t\t\t\"path\": \"/hello-world.html\",\n\t\t\t\t\t\"tags\": null,\n\t\t\t\t\t\"title\": \"Hello World\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"prev\": false,\n\t\t\t\"next\": {\n\t\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> soma <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\t\"timeToRead\": 3,\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\t\"tags\": [\n\t\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\t\"front-end\"\n\t\t\t\t\t],\n\t\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"url\": \"http://jeffersondaniel.com/blog\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---hello-world-html-c6d7e6c1ef3c9b624adb.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Oláá, aqui nasce o primeiro post :), Já vou começar com um cliche:</p>\\n<h4>\\\"É ensinado que se aprende.\\\"</h4>\\n<p>A algum tempo atraz começei a fazer o Be-mean, um curso sobre full-stack em javascript. E no meio do percurso tinha como tarefa fazer um artigo sobre variáveis, dai veio a vontade de escrever um pouco mais para compartilhar o que venho aprendendo ai nesses dois anos como desenvolvedor front-end, não é muito tempo mas já é um começo.</p>\\n<p>Pretendo postar aqui na maioria das vezes coisas sobre javascript que é o que mais venho estudando comprando livros e tal, mas provavelmente ira ter posts sobre outros assuntos.\\nSem mais delongas..</p>\\n<p><strong>Let's go!</strong></p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"date\": \"19/12/2015\",\n\t\t\t\t\"path\": \"/hello-world.html\",\n\t\t\t\t\"tags\": null,\n\t\t\t\t\"title\": \"Hello World\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"prev\": false,\n\t\t\"next\": {\n\t\t\t\"excerpt\": \"O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor  como uma variável pode receber um valor de uma IIFE  temos que entender antes alguns conceitos. O primeiro deles é...\",\n\t\t\t\"html\": \"<p>O IIFE ou Immediately-invoked function expression, é umas das formas de se declarar uma função no javascript, para entender melhor <strong>como uma variável pode receber um valor de uma IIFE</strong> temos que entender antes alguns conceitos.</p>\\n<p>O primeiro deles é como funciona a <strong>IIFE</strong>, que será a nossa função que retorna um valor, após isso temos que entender como funciona o <strong>Variable assignment</strong> que é a forma de atribuir uma função a nossa variável, e por fim, podemos juntar esses dois conceitos e criar nossa função auto executável que vai retornar um valor para nossa variável.</p>\\n<h3>IFFE (função auto executável)</h3>\\n<p>A função no javascript na sua sintax mais básica como: <strong>function functionName(){ /* code */ }</strong>, precisa obrigatoriamente ser chamada para que o bloco de código contida dentro dela seja executado. Uma alternativa para isso é o IIFE que ao mesmo tempo cria a função e já a executa na sequência.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Algumas formas de criar uma IIFE:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> fn <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Variable Assignment</h3>\\n<p>É a forma de criar uma função retornando um valor a uma variável, dessa forma a menos que essa função seja um IIFE ainda precisamos executar a função para que a variável receba o valor retornado dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Função anônima atribuída a uma variável</span>\\n<span class=\\\"token keyword\\\">var</span> soma <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 10</span>\\n<span class=\\\"token function\\\">adicao</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// adicao is not defined</span>\\n</code></pre>\\n      </div>\\n<p>Legal, mas porque eu deveria aprender isso?</p>\\n<h3>Escopo</h3>\\n<p>As variáveis têm como escopo a função onde elas foram criadas, e como não queremos poluir o escopo global as variáveis criadas dentro da nossa IIFE só existem dentro dela.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> element <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// &lt; div id=\\\"element\\\">...&lt;/ div></span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span> element <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// element is not defined</span>\\n</code></pre>\\n      </div>\\n<h3>Conflitos de libs</h3>\\n<p>Como muitas libs usam o <strong>$</strong> e é comum haver conflitos, apesar de ter outras alternativas como o <strong>noConflict()</strong> na IIFE você pode passar a referencia ao jQuery, ou qualquer outra lib como parâmetro:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> $j <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">facaAlgo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* code */</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">$j</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span> facaAlgo <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> jQuery <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Performance</h3>\\n<p>Se você usa muitas vezes variáveis globais em seu código uma boa dica para performace é passar essas variáveis como parâmetro para que o interpretador não precise sair do escopo da sua função toda vez para ir buscar o valor daquela variável global.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> doc <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> btn <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">,</span> element <span class=\\\"token operator\\\">=</span> doc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'element'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    btn<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addEventListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'click'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n      element<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>display <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'none'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span> document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Com a junção desses dois conceitos, o <strong>Variable Assignment</strong> e o <strong>IIFE</strong> podemos criar algo como:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n    subtracao<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Nesse exemplo acima temos uma função auto executável anônima atribuída a variável <strong>operacao</strong>, nessa IIFE retornamos um objeto com duas funções atribuídas as chaves do objeto. Como nós estamos retornando um objeto podemos acessar essas funções com <strong>operacao.soma( 5, 5 )</strong> por exemplo.\\nÉ como se estivéssemos exportando essas funções que primeiramente estavam privadas dentro da IIFE para ser acessada através da variável <strong>operacao</strong>. Sendo assim podemos escolher o que queremos que permaneça privado e o que queremos tornar acessível.\\nPara deixar mais organizado podemos criar as funções separadas e retornar o objeto apenas com o nome da função desejada.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> operacao <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">+</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// função privada da IIFE</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span> num1<span class=\\\"token punctuation\\\">,</span> num2 <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> num1 <span class=\\\"token operator\\\">-</span> num2<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    soma<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// retornando função soma a variável operacao</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">soma</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 10</span>\\noperacao<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subtracao</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// operacao.subtracao is not a function</span>\\n</code></pre>\\n      </div>\\n<h3>Quer saber mais sobre IIFE ?</h3>\\n<ul>\\n<li><a href=\\\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\\\">IIFE - benalman </a></li>\\n<li><a href=\\\"http://imasters.com.br/front-end/javascript/sobre-funcoes-imediatas-javascript-iife/\\\">Sobre funções imediatas JavaScript</a></li>\\n<li><a href=\\\"http://www.bryanbraun.com/2014/11/27/every-possible-way-to-define-a-javascript-function\\\">Every Possible Way to Define a Javascript Function</a></li>\\n</ul>\",\n\t\t\t\"id\": \"/home/jefferson/workspace/blog/src/pages/20-12-2015-immediately-invoked-function-expression/index.md absPath of file >>> MarkdownRemark\",\n\t\t\t\"timeToRead\": 3,\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"date\": \"2015-12-20T03:49:16.408Z\",\n\t\t\t\t\"path\": \"/immediately-invoked-function-expression.html\",\n\t\t\t\t\"tags\": [\n\t\t\t\t\t\"javascript\",\n\t\t\t\t\t\"front-end\"\n\t\t\t\t],\n\t\t\t\t\"title\": \"Immediately invoked function expression\"\n\t\t\t}\n\t\t},\n\t\t\"url\": \"http://jeffersondaniel.com/blog\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/hello-world-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/hello-world-html.json\n// module chunks = 15"],"sourceRoot":""}